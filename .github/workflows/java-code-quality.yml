name: Java Code Quality and Formatting

on: [push, pull_request]

jobs:
  lint:
    name: Analyze and Lint Java Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # This step checks out the code from your repository so the workflow can analyze it.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
        # This step sets up Java Development Kit (JDK) version 17, which is required to compile and run your Java code.

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
        # This step caches Maven dependencies to speed up the build process. It saves the downloaded dependencies
        # so that they don't need to be downloaded again in future runs unless the `pom.xml` file changes.

      - name: Install dependencies
        run: mvn install -DskipTests
        # This command installs all the necessary dependencies for your project based on the `pom.xml` file.
        # The `-DskipTests` flag is used to skip running tests at this stage, focusing on dependency installation.

      - name: Run Checkstyle
        run: mvn checkstyle:check
        # This command runs Checkstyle, a tool that checks your Java code against defined coding standards.
        # It helps ensure that your code follows best practices and is consistently formatted.

      - name: Run PMD
        run: mvn pmd:check
        # This command runs PMD, a static code analysis tool that looks for potential bugs and code quality issues.
        # It helps you identify common mistakes or bad practices in your code.

      - name: Run SpotBugs
        run: mvn spotbugs:check
        # This command runs SpotBugs, another static analysis tool that focuses on finding bugs in your code.
        # SpotBugs can detect various types of bugs that could lead to issues in production.

      - name: Verify code formatting with Spotless (excluding Javadocs)
        run: mvn spotless:check -Dspotless.apply.skip
        # This command runs Spotless with the Javadoc checks skipped.
        # The `-Dspotless.apply.skip` flag is used to bypass the application of Spotless checks for Javadocs.
